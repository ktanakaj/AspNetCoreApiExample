####
## Fluentd Configuration (ローカル用)
##

# 送信されたログを整形して、ローカルフォルダに出力する。
#
# ログはアプリから直接、またはdockerコンテナのFluentdロギングドライバで送られる想定。
# タグは先頭の2つでファイル別に出力している。
# ロギングドライバ経由の場合は、そのままではタグを分けられないので、
# 送信されるログの種類に応じてパーサー等定義して、振り分けている。
#
# タグ例) docker.nginx, docker.app

# 外部から受け取ったログ
<source>
  @type  forward
  @id    input1
  @label @mainstream
  port  24224
</source>

# それ以外（自分自身など）のログ
<filter **>
  @type stdout
</filter>

<label @mainstream>
  ### ログを種類に応じて成形
  # Nginxコンテナ用。標準出力 (access.log) とエラー出力 (error.log) に整理
  <match docker.nginx.**>
    @type rewrite_tag_filter
    <rule>
      key source
      pattern /^stdout$/
      tag ${tag_parts[1]}.access
    </rule>
    <rule>
      key source
      pattern /^stderr$/
      tag ${tag_parts[1]}.error
    </rule>
  </match>
  # Fluentdロギングドライバ経由でJSONで送ってくるコンテナ用。
  # 文字列のJSONを展開し、必用に応じてタグを書き換えて専用ログに切り出す。
  <filter docker.app.**>
    @type parser
    format json
    key_name log
    reserve_data true
  </filter>
  <filter docker.app.**>
    @type record_transformer
    remove_keys log
  </filter>
  <match docker.app.**>
    @type rewrite_tag_filter
    # アクセスログ
    <rule>
      key SourceContext
      pattern /AccessLogMiddleware$/
      tag ${tag_parts[1]}.access
    </rule>
    # SQLログ
    <rule>
      key SourceContext
      pattern /^Microsoft\.EntityFrameworkCore\./
      tag ${tag_parts[1]}.sql
    </rule>
    # 専用ログが無いものは、dockerを取ってappを付ける
    <rule>
      key SourceContext
      pattern /.+/
      tag ${tag_parts[1]}.app
    </rule>
  </match>
  # その他のdockerで始まるタグは、dockerを取ってconsoleを付ける
  <match docker.**>
    @type rewrite_tag_filter
    <rule>
      key source
      pattern /.+/
      tag ${tag_parts[1]}.console
    </rule>
  </match>

  # ログ出力。最終的にここで出力して終了
  <match **>
    @type file
    path /fluentd/log/${tag[0]}-${tag[1]}
    append true
    <format>
      @type json
    </format>
    <buffer tag>
      flush_interval 30s
      flush_at_shutdown true
    </buffer>
  </match>
</label>
